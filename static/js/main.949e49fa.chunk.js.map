{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","App.tsx","api/todos.ts","helpers.tsx","index.tsx"],"names":["UserInfo","user","name","email","className","href","TodoInfo","todo","id","completed","title","cn","TodoList","todos","map","username","getUserById","userId","usersFromServer","find","App","useState","setTitle","isTitleValid","setIsTitleValid","isUserIdValid","setIsUserIdValid","setUserId","actualTodos","setListTodos","action","method","onSubmit","event","preventDefault","validTitle","trim","addedTodo","Math","max","prevlist","type","value","placeholder","onChange","target","Number","userFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.949e49fa.chunk.js","sourcesContent":["import React from 'react';\n\nexport type User = {\n  id: number,\n  name: string,\n  email: string,\n};\n\ntype Props = {\n  user: User;\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  const {\n    name,\n    email,\n  } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import React from 'react';\nimport cn from 'classnames';\nimport { UserInfo, User } from '../UserInfo';\n\nexport type Todo = {\n  id: number,\n  userId: number,\n  title: string,\n  completed: boolean,\n  user: User | null,\n};\n\ntype Props = {\n  todo: Todo,\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    id,\n    completed,\n    title,\n    user,\n  } = todo;\n\n  return (\n    <article\n      data-id={id}\n      className={cn(\n        'TodoInfo',\n        {\n          'TodoInfo--completed': completed,\n        },\n      )}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n\n      {user && (\n        <UserInfo user={user} />\n      )}\n    </article>\n  );\n};\n","import React from 'react';\nimport { Todo, TodoInfo } from '../TodoInfo';\n\ntype Todos = {\n  todos: Todo[];\n};\n\nexport const TodoList:React.FC<Todos> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map((todo) => (\n        <TodoInfo key={todo.id} todo={todo} />\n      ))}\n    </section>\n  );\n};\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import './App.scss';\nimport { useState } from 'react';\nimport { TodoList } from './components/TodoList';\nimport { User } from './components/UserInfo';\nimport { Todo } from './components/TodoInfo';\nimport { newTodoId } from './helpers';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nfunction getUserById(userId: number): User | null {\n  const foundUser = usersFromServer.find(user => user.id === userId);\n\n  return foundUser || null;\n}\n\nexport const todos: Todo[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUserById(todo.userId),\n}));\n\nexport const App = () => {\n  const [title, setTitle] = useState('');\n  const [isTitleValid, setIsTitleValid] = useState(false);\n  const [isUserIdValid, setIsUserIdValid] = useState(false);\n  const [userId, setUserId] = useState(0);\n  const [actualTodos, setListTodos] = useState(todos);\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const validTitle = title.trim();\n\n    if (validTitle) {\n      setIsTitleValid(true);\n    }\n\n    if (!userId) {\n      setIsUserIdValid(true);\n    }\n\n    if (!userId || validTitle) {\n      return;\n    }\n\n    const addedTodo: Todo = {\n      id: newTodoId(todos),\n      completed: false,\n      user: getUserById(userId),\n      title: validTitle,\n      userId,\n    };\n\n    setListTodos(prevlist => [...prevlist, addedTodo]);\n    setTitle('');\n    setUserId(0);\n  };\n\n  const handleInput = (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    setTitle(event.target.value);\n    setIsTitleValid(false);\n  };\n\n  const handleSelect = (\n    event: React.ChangeEvent<HTMLSelectElement>,\n  ) => {\n    setUserId(Number(event.target.value));\n    setIsUserIdValid(false);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <input\n            name=\"title\"\n            type=\"text\"\n            value={title}\n            data-cy=\"titleInput\"\n            placeholder=\"Enter a title\"\n            onChange={handleInput}\n          />\n\n          {isTitleValid && (\n            <span className=\"error\">Please enter a title</span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <select\n            data-cy=\"userSelect\"\n            value={userId}\n            onChange={handleSelect}\n          >\n            <option value=\"0\">Choose a user</option>\n            {usersFromServer.map(userFromServer => (\n              <option\n                value={userFromServer.id}\n                key={userFromServer.id}\n              >\n                {userFromServer.name}\n              </option>\n            ))}\n          </select>\n\n          {isUserIdValid && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n        </div>\n\n        <button\n          type=\"submit\"\n          data-cy=\"submitButton\"\n        >\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={actualTodos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","interface Todo {\n  id: number,\n  title: string,\n  completed: boolean,\n  userId: number,\n}\n\nexport const newTodoId = (todos: Todo[]) => {\n  return Math.max(...todos.map(todo => todo.id)) + 1;\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}